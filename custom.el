(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Info-breadcrumbs-in-header-flag nil)
 '(Info-breadcrumbs-in-mode-line-mode nil)
 '(Info-mode-hook (quote (flyspell-mode-off scroll-lock-mode less-minor-mode)))
 '(LaTeX-command "latex -shell-escape")
 '(LaTeX-mode-hook (quote (LaTeX-preview-setup flymake-mode-off turn-on-flyspell)) t)
 '(TeX-master nil)
 '(ac-auto-show-menu t)
 '(ac-auto-start t)
 '(ac-comphist-file "/home/haxney/.emacs.d/tmp/ac-comphist.dat")
 '(ac-dictionary-directories (quote (".emacs.d/elpa/auto-complete-1.4.20110207/dict")))
 '(after-save-hook (quote (executable-make-buffer-file-executable-if-script-p)))
 '(anything-c-adaptive-history-file "~/.emacs.d/tmp/anything-c-adaptive-history")
 '(anything-c-enable-eval-defun-hack nil)
 '(anything-su-or-sudo "sudo")
 '(auto-save-list-file-prefix "~/.emacs.d/tmp/auto-save-list/.saves-")
 '(backup-directory-alist (quote (("." . "~/.emacs.d/tmp/baks/"))))
 '(before-save-hook (quote (whitespace-cleanup)))
 '(blink-cursor-mode nil)
 '(bm-annotate-on-create nil)
 '(bm-buffer-persistence t)
 '(bm-highlight-style (quote bm-highlight-only-fringe))
 '(bm-recenter t)
 '(bm-repository-file "~/.emacs.d/tmp/bm-repository")
 '(bm-restore-repository-on-load t t)
 '(bookmark-default-file "~/.emacs.d/tmp/bookmark")
 '(browse-url-firefox-program "firefox-3.5")
 '(case-fold-search t)
 '(coffee-js-mode (quote javascript-mode))
 '(coffee-tab-width 2)
 '(column-number-mode t)
 '(command-frequency-table-file "~/.emacs.d/tmp/frequencies")
 '(company-backends (quote (company-elisp company-nxml company-css company-semantic (company-etags company-keywords company-dabbrev-code) company-dabbrev company-oddmuse company-files)))
 '(company-begin-commands (quote (self-insert-command org-self-insert-command)))
 '(company-idle-delay t)
 '(company-major-modes (quote (css-mode emacs-lisp-mode nxml-mode lisp-interaction-mode org-mode log-edit-mode)))
 '(confirm-kill-emacs (quote yes-or-no-p))
 '(cua-delete-selection nil)
 '(cua-enable-cua-keys nil)
 '(cua-mode t nil (cua-base))
 '(current-language-environment "UTF-8")
 '(debug-on-error nil)
 '(default-frame-alist (quote ((cursor-type bar . 2) (font . "Monospace-8"))))
 '(default-input-method "rfc1345")
 '(default-major-mode (quote text-mode) t)
 '(ecb-layout-name "left8")
 '(ecb-layout-window-sizes (quote (("left8" (0.22137404580152673 . 0.28125) (0.22137404580152673 . 0.25) (0.22137404580152673 . 0.265625) (0.22137404580152673 . 0.1875)))))
 '(ecb-options-version "2.32")
 '(ecb-tip-of-the-day nil)
 '(ede-project-placeholder-cache-file "~/.emacs.d/tmp/projects.ede")
 '(edit-server-new-frame nil)
 '(emacs-lisp-mode-hook (quote (turn-on-eldoc-mode checkdoc-minor-mode flyspell-prog-mode paredit-mode set-elisp-mode-name)))
 '(erc-autoaway-mode t)
 '(erc-autojoin-channels-alist (quote (("freenode.net" "#emacs") ("quadium.net" "#betaspring"))))
 '(erc-autojoin-mode t)
 '(erc-email-userid "dan@haxney.org")
 '(erc-generate-log-file-name-function (quote erc-generate-log-file-name-date-and-name))
 '(erc-interpret-controls-p (quote remove))
 '(erc-log-channels-directory "~/logs")
 '(erc-log-insert-log-on-open nil)
 '(erc-log-mode t)
 '(erc-log-write-after-insert t)
 '(erc-log-write-after-send t)
 '(erc-max-buffer-size 20000)
 '(erc-modules (quote (autoaway autojoin button completion fill irccontrols list log match menu move-to-prompt netsplit networks noncommands notify readonly ring services smiley stamp track truncate)))
 '(erc-move-to-prompt-mode t)
 '(erc-netsplit-mode t)
 '(erc-networks-mode t)
 '(erc-nick "haxney")
 '(erc-nick-changed-functions (quote (erc-nickserv-identify-on-nick-change)))
 '(erc-nickserv-alist (quote ((Ars nil nil "Census" "IDENTIFY" nil nil nil) (Austnet "NickOP!service@austnet.org" "/msg\\s-NickOP@austnet.org\\s-identify\\s-<password>" "nickop@austnet.org" "identify" nil nil nil) (Azzurra "NickServ!service@azzurra.org" "/ns\\s-IDENTIFY\\s-password" "NickServ" "IDENTIFY" nil nil nil) (BitlBee nil nil "&bitlbee" "identify" nil nil nil) (BRASnet "NickServ!services@brasnet.org" "/NickServ\\s-IDENTIFY\\s-senha" "NickServ" "IDENTIFY" nil "" nil) (DALnet "NickServ!service@dal.net" "/msg\\s-NickServ@services.dal.net\\s-IDENTIFY\\s-<password>" "NickServ@services.dal.net" "IDENTIFY" nil nil nil) (freenode "NickServ!NickServ@services." "This\\s-nickname\\s-is\\s-registered.\\s-Please\\s-choose" "NickServ" "IDENTIFY" nil nil "You\\s-are\\s-now\\s-identified\\s-for\\s-") (GalaxyNet "NS!nickserv@galaxynet.org" "Please\\s-change\\s-nicks\\s-or\\s-authenticate." "NS@services.galaxynet.org" "AUTH" t nil nil) (GRnet "NickServ!service@irc.gr" "This\\s-nickname\\s-is\\s-registered\\s-and\\s-protected." "NickServ" "IDENTIFY" nil nil "Password\\s-accepted\\s--\\s-you\\s-are\\s-now\\s-recognized.") (iip "Trent@anon.iip" "type\\s-/squery\\s-Trent\\s-identify\\s-<password>" "Trent@anon.iip" "IDENTIFY" nil "SQUERY" nil) (OFTC "NickServ!services@services.oftc.net" nil "NickServ" "IDENTIFY" nil nil "You\\s-are\\s-successfully\\s-identified\\s-as\\s-") (Rizon "NickServ!service@rizon.net" "This\\s-nickname\\s-is\\s-registered\\s-and\\s-protected." "NickServ" "IDENTIFY" nil nil "Password\\s-accepted\\s--\\s-you\\s-are\\s-now\\s-recognized.") (QuakeNet nil nil "Q@CServe.quakenet.org" "auth" t nil nil) (SlashNET "NickServ!services@services.slashnet.org" "/msg\\s-NickServ\\s-IDENTIFY\\s-password" "NickServ@services.slashnet.org" "IDENTIFY" nil nil nil) (EsperNet "NickServ!services@esper.net" "This\\s-nickname\\s-is\\s-registered\\s-and\\s-protected." "NickServ" "IDENTIFY" nil nil "-NickServ-\\sPassword\\saccepted\\s--\\syou\\sare\\snow\\srecognized."))))
 '(erc-nickserv-identified-hook (quote (erc-autojoin-after-ident)))
 '(erc-pals (quote ("evie" "sinserrar")))
 '(erc-prompt (quote erc-custom-prompt))
 '(erc-prompt-for-nickserv-password nil)
 '(erc-server "localhost")
 '(erc-services-mode t)
 '(erc-spelling-mode t)
 '(erc-stamp-mode t)
 '(erc-text-matched-hook (quote (erc-log-matches erc-respond-once-if-away notify-erc)))
 '(erc-timestamp-format "[%R-%m/%d]")
 '(erc-track-exclude-server-buffer t)
 '(erc-track-exclude-types (quote ("JOIN" "NICK" "PART" "QUIT" "MODE" "333" "353")))
 '(erc-track-minor-mode t)
 '(erc-track-mode t)
 '(erc-track-position-in-mode-line t)
 '(erc-track-remove-disconnected-buffers t)
 '(erc-truncate-buffer-on-save t)
 '(erc-truncate-mode t)
 '(erc-user-full-name "Daniel Hackney")
 '(eshell-directory-name "~/.emacs.d/tmp/eshell/")
 '(eshell-mode-hook (quote (visual-line-mode)))
 '(espresso-indent-level 4 t)
 '(espresso-js-tmpdir "~/.emacs.d/tmp/js")
 '(fill-column 80)
 '(flymake-allowed-file-name-masks (quote (("\\.c\\'" flymake-simple-make-init) ("\\.cpp\\'" flymake-simple-make-init) ("\\.xml\\'" flymake-xml-init) ("\\.cs\\'" flymake-simple-make-init) ("\\.p[ml]\\'" flymake-perl-init) ("\\.php[345]?\\'" flymake-php-init) ("\\.module\\'" flymake-php-init) ("\\.inc\\'" flymake-php-init) ("\\.install\\'" flymake-php-init) ("\\.h\\'" flymake-master-make-header-init flymake-master-cleanup) ("\\.java\\'" flymake-simple-make-java-init flymake-simple-java-cleanup) ("[0-9]+\\.tex\\'" flymake-master-tex-init flymake-master-cleanup) ("\\.tex\\'" flymake-simple-tex-init) ("\\.idl\\'" flymake-simple-make-init))))
 '(flymake-start-syntax-check-on-find-file nil)
 '(flyspell-use-meta-tab nil)
 '(font-use-system-font t)
 '(geben-temporary-file-directory "~/.emacs.d/tmp/geben")
 '(git-append-signed-off-by t)
 '(global-highline-mode t)
 '(global-linum-mode t)
 '(global-semantic-decoration-mode t)
 '(global-semantic-highlight-edits-mode t nil (semantic/util-modes))
 '(global-semantic-highlight-func-mode t nil (semantic/util-modes))
 '(global-semantic-idle-scheduler-mode t nil (semantic/idle))
 '(global-semantic-mru-bookmark-mode t)
 '(global-semantic-show-parser-state-mode t nil (semantic/util-modes))
 '(global-semantic-stickyfunc-mode t nil (semantic/util-modes))
 '(global-semanticdb-minor-mode t)
 '(global-smart-tab-mode t)
 '(global-subword-mode t)
 '(global-undo-tree-mode t)
 '(hippie-expand-dabbrev-as-symbol t)
 '(hippie-expand-try-functions-list (quote (try-complete-lisp-symbol-partially try-complete-file-name-partially try-expand-all-abbrevs try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill)))
 '(ido-auto-merge-work-directories-length -1)
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(ido-ignore-files (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "_whizzy_.*" ".*\\.raux" ".*\\.wdvi" "\\.git")))
 '(ido-minibuffer-setup-hook (quote ((lambda nil (local-set-key "" (quote ido-prev-match))) (lambda nil (local-set-key "" (quote ido-next-match))))))
 '(ido-mode (quote both) nil (ido))
 '(ido-rotate-file-list-default t)
 '(ido-save-directory-list-file "~/.emacs.d/tmp/.ido.last")
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(keyfreq-autosave-mode t)
 '(keyfreq-file "~/.emacs.d/tmp/keyfreq")
 '(keyfreq-file-lock "~/.emacs.d/tmp/keyfreq.lock")
 '(keyfreq-mode t)
 '(line-number-mode t)
 '(load-dirs t)
 '(load-home-init-file t t)
 '(magit-process-connection-type nil)
 '(menu-bar-mode nil)
 '(nxhtml-skip-welcome t)
 '(nxml-mode-hook (quote (nxml-enable-unicode-char-name-sets rng-nxml-mode-init turn-on-flyspell)))
 '(nxml-slash-auto-complete-flag t)
 '(org-agenda-files (quote ("~/org/root.org")))
 '(org-archive-location "%s_archive::* Archived Tasks")
 '(org-capture-templates (quote (("t" "Todo" entry (file+headline "~/org/root.org" "Task Inbox") "** TODO %?
   %i") ("d" "Day Page" entry (function org-open-day-page) "
* Sleep" :immediate-finish t :unnarrowed t))))
 '(org-default-notes-file "~/org/root.org")
 '(org-id-locations-file "~/.emacs.d/tmp/.org-id-locations")
 '(org-log-done (quote time))
 '(org-modules (quote (org-bibtex org-info org-jsinfo org-habit org-irc org-protocol org-special-blocks)))
 '(org-registry-file "~/.emacs.d/tmp/org-registry.el")
 '(org-return-follows-link t)
 '(org-todo-keywords (quote ((sequence "TODO" "STARTED" "WAITING" "DONE"))))
 '(org-track-directory "~/.emacs.d/elisp/")
 '(org-track-remove-package t)
 '(package-archives (quote (("marmalade" . "http://marmalade-repo.org/packages/") ("technomancy" . "http://repo.technomancy.us/emacs/") ("elpa" . "http://tromey.com/elpa/") ("gnu" . "http://elpa.gnu.org/packages/"))))
 '(package-base "~/Projects/elpa/")
 '(persp-completing-func (quote ido-completing-read))
 '(pgg-cache-passphrase nil)
 '(pgg-default-user-id "A016D1D6")
 '(php-mode-hook (quote (c-style-drupal)))
 '(pop-up-windows nil)
 '(popcmp-group-alternatives nil)
 '(predictive-auto-complete nil)
 '(predictive-auto-learn t)
 '(predictive-dict-autosave-on-kill-buffer nil)
 '(predictive-dict-autosave-on-mode-disable nil)
 '(predictive-main-dict (quote (my-dict dict-english)))
 '(quack-default-program "mzscheme -g")
 '(quack-dir "~/.emacs.d/tmp/quack")
 '(quack-global-menu-p nil)
 '(quack-pretty-lambda-p nil)
 '(quack-run-scheme-always-prompts-p nil)
 '(quack-smart-open-paren-p nil)
 '(recentf-mode t)
 '(recentf-save-file "~/.emacs.d/tmp/recentf")
 '(safe-local-variable-values (quote ((eval add-hook (quote write-file-hooks) (quote time-stamp)) (ruby-compilation-executable . "ruby") (ruby-compilation-executable . "ruby1.8") (ruby-compilation-executable . "ruby1.9") (ruby-compilation-executable . "rbx") (ruby-compilation-executable . "jruby") (whitespace-line-column . 80) (lexical-binding . t))))
 '(save-completions-file-name "~/.emacs.d/tmp/completions")
 '(save-place-file "~/.emacs.d/tmp/places")
 '(scroll-bar-mode nil)
 '(scss-compile-at-save nil)
 '(semantic-default-submodes (quote (global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode)))
 '(semantic-mode t)
 '(semantic-python-dependency-system-include-path (quote ("/usr/local/lib/python2.6/dist-packages/Couchapp-0.3.32-py2.6.egg" "/usr/local/lib/python2.6/dist-packages/paisley-0.1-py2.6.egg" "/usr/local/lib/python2.6/dist-packages/feedparser-4.1-py2.6.egg" "/usr/local/lib/python2.6/dist-packages/python_twitter-0.6-py2.6.egg" "/usr/local/lib/python2.6/dist-packages/twython-0.9-py2.6.egg" "/usr/local/lib/python2.6/dist-packages/tweepy-1.3-py2.6.egg" "/usr/lib/python2.6" "/usr/lib/python2.6/plat-linux2" "/usr/lib/python2.6/lib-tk" "/usr/lib/python2.6/lib-old" "/usr/lib/python2.6/lib-dynload" "/usr/lib/python2.6/dist-packages" "/usr/lib/python2.6/dist-packages/PIL" "/usr/lib/python2.6/dist-packages/gst-0.10" "/usr/lib/pymodules/python2.6" "/usr/lib/python2.6/dist-packages/gtk-2.0" "/usr/lib/pymodules/python2.6/gtk-2.0" "/usr/lib/python2.6/dist-packages/wx-2.8-gtk2-unicode" "/usr/local/lib/python2.6/dist-packages" "/usr/lib/pymodules/python2.6/IPython/Extensions")))
 '(semanticdb-default-save-directory "~/.emacs.d/tmp/semanticdb")
 '(sentence-end-double-space nil)
 '(server-auth-dir "~/.emacs.d/tmp/server/")
 '(server-mode t)
 '(server-visit-hook (quote (server-edit-presets)))
 '(show-paren-mode t)
 '(smart-tab-using-hippie-expand t)
 '(smex-save-file "~/.emacs.d/tmp/smex.save")
 '(smiley-data-directory "~/.emacs.d/smileys")
 '(split-width-threshold nil)
 '(srecode-map-save-file "~/.emacs.d/tmp/srecode-map")
 '(text-mode-hook (quote (turn-on-flyspell turn-on-auto-fill text-mode-hook-identify)))
 '(tool-bar-mode nil)
 '(tramp-completion-reread-directory-timeout 5)
 '(tramp-default-method "ssh")
 '(tramp-persistency-file-name "~/.emacs.d/tmp/tramp")
 '(transient-mark-mode t)
 '(truncate-lines t)
 '(undo-tree-mode-lighter " uT")
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(vc-handled-backends nil)
 '(wdired-use-dired-vertical-movement (quote sometimes))
 '(weblogger-config-alist (quote (("haxney.org" "http://www.blogger.com/api" "dan@haxney.org" "" "7770370347473031286"))))
 '(windmove-wrap-around t)
 '(woman-use-own-frame nil)
 '(x-select-enable-primary t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bm-face ((((class color) (background light)) (:background "orange1"))))
 '(bm-fringe-face ((((class color) (background light)) (:background "orange1"))))
 '(bm-fringe-persistent-face ((((class color) (background light)) (:background "DarkBlue"))))
 '(bm-persistent-face ((((class color) (background light)) (:background "DarkBlue"))))
 '(diff-added ((t (:inherit diff-changed-face :background "Green"))))
 '(diff-added-face ((t (:inherit diff-changed-face :background "Green"))) t)
 '(diff-removed ((t (:inherit diff-changed-face :background "red"))))
 '(diff-removed-face ((t (:inherit diff-changed-face :background "red"))) t)
 '(flyspell-duplicate ((((class color)) (:foreground "Gold3" :underline t :weight bold))))
 '(flyspell-incorrect ((((class color)) (:foreground "magenta" :underline t :weight bold))))
 '(highline-face ((t (:background "pale turquoise"))))
 '(hl-line ((t (:background "pale turquoise"))))
 '(whizzy-point-face ((((class color)) nil)) t))
